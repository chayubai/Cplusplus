#define _CRT_SECURE_NO_WARNINGS 1

//#include "Person.h"//这里包含头文件的时候不能用.h  否则会报无法解析的外部符号，应该使用.cpp
//注意：正常.cpp是函数的实现。.h是类的声明。这里包含.h文件会报错，而包含.cpp文件则不会

//#include "Person.cpp"//包含.cpp（但不推荐）
//因为.cpp中有.h文件和函数实现，因此包含.cpp不会出错

#include "Person.hpp"

//为什么包含.h文件不行？
//编译器将该项目所有的.cpp文件独立编译(.h不编译)，
//在编译cpp的时候，当发现一个函数调用，在 当前 文件找不到函数实现时，函数位置就会生成符号
//当所以cpp文件编译完成后，开始链接，将函数实现和函数产生的符号进行链接

//当编译主函数的cpp文件时，调用无参构造和shouPerson方法，当前 文件找不到函数实现，产生的符号进行链接

//类模板中也是cpp文件，编译器编译时，由于没有对该函数模板的使用，即 当前 文件没有触发函数模板的调用，
//只进行了一次编译，因此该文件编译后是不会产生具体模板函数

//最终链接时就会报错

//而当包含吹cpp时，主函数中就有了函数模板和触发该模板函数的调用，因此就能编译成功

//注意：
//由于类模板中的成员函数一开始（编译阶段）是创建不出来的，
//类模板的成员函数在运行阶段(当前文件中调用，且当前文件中有函数模板)才去创建，导致虽然包含了.h文件里有函数声明，但不会去创建函数的实现，编译器从始至终就没有找到函数模板，而无法调用

int main()
{
	Person<string, int> p("Tom", 10);//包含.h文件，但模板函数无法创建，这里会报错，无法解析的外部符号
	p.showPerson();//包含.h文件，但模板函数无法创建，这里会报错，无法解析的外部符号
	return 0;
}

//注意：类模板中的成员函数，也不建议分文件编写，而是将类模板的声明和成员函数的实现放入到同一个文件中

//然后将 .h 文件改为 .hpp 表示既有声明，又有实现